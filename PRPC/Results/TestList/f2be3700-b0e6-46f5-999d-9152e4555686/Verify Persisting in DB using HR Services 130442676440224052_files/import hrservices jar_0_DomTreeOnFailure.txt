<html class="ie ie11" lang="en-IN"><head>  <title> Confirm Import Wizard</title>  <script language="javascript">var uwtClientStart = new Date().getTime();</script>                                      <link href="webwb/pzjquery-ui_11685594314.css!pega_yui_styles_min_13084519564!!.css" rel="stylesheet" type="text/css">      <link href="webwb/reports_core_11784546932.css!!.css" rel="stylesheet" type="text/css">                 <script src="pzpega_ui_jquery_1799212622!!.js" type="text/javascript"></script>   <script>  if (!pega) var pega = {}; if (!pega.desktop) { pega.desktop = {}; pega.d = pega.desktop; } pega.desktop.loadTime = new Date().getTime(); pega.d.csrfToken = "" ; pega.d.pyUID = "Administrator@pega.com"; pega.d.pxReqURI = "/prweb/PRServlet/pbdorj4V2aBoI4ScEONLsEaxdEWiqDby*/!TABTHREAD0"; pega.d.pxHelpURI = "http://localhost:8080/prhelp"; pega.d.pxPdnURI = "http://pdn.pega.com/node/44156"; var requestHomeURI = "http://10.150.111.38:9080/prweb/PRServlet/pbdorj4V2aBoI4ScEONLsEaxdEWiqDby*"; pega.d.currAG ="PRPC:Administrators";     pega.d.isPortlet = false;   pega.d.desktopType = "User"; pega.d.desktopSubType = "Composite"; pega.d.pzUnitTestPKey = "Developer";    var bEncryptURLs = false;    pega.desktop.isSpaceHarness = ""; pega.desktop.availableSpaces = new Array();  pega.desktop.availableSpaces.push('NewPortal');  pega.d.productionLevel = "2"; pega.d.activeSpaceName = "";  </script>                 <script src="webwb/pega_desktop_domainsuffix_1819019784.js!clientlogbase_11632504602.js!pega_yui_13795194878!desktopwrapper_13371440755!developerwrapperapi_12187829019.js!!.js" type="text/javascript"></script>             <script> var strKey = "PEGAACCEL"; var insName = ""; var strClassName = "PegaAccel-Management-Import"; var strPageName = "pyWorkPage"; var pxReqURI = "/prweb/PRServlet/pbdorj4V2aBoI4ScEONLsEaxdEWiqDby*/!TABTHREAD0"; var portalVersion = "1"; var oParentWindow = null; if (typeof pega != "undefined"){ if(pega.util.Event.isIE != null){ if (pega.util.Event.isIE[0] == "MSIE"){ oParentWindow=document.parentWindow; } } else{ oParentWindow=document.defaultView; } } </script>    <script src="webwb/prscripts_12576240004.js!!.js" type="text/javascript"></script>   


<script> var gsServerReqURI = "/prweb/PRServlet/pbdorj4V2aBoI4ScEONLsEaxdEWiqDby*/!TABTHREAD0";</script>
<script>
    var safeUrlRequestURI = "/prweb/PRServlet/pbdorj4V2aBoI4ScEONLsEaxdEWiqDby*/!TABTHREAD0"; 
    var bEncryptURLs = false;
    
</script>

    
<script src="webwb/safeurl_12707753893.js!!.js" type="text/javascript"></script>


	 
<script src="smartprompt_1872744077!!.js" type="text/javascript"></script>

<script>
	function SmartPromptFocusHandler(e) {
		var evt = e || window.event || arguments.callee.caller.arguments[0];
 		if(typeof(evt)  != "undefined" ) {
			var evtTarget = evt.srcElement || evt.target;
			if (ISnsSmartPromptInitActive(evtTarget, false))
				return;
		}		
	}
	function zUtil_SmartPromptFocusHandler(e) {
		var evt = e || window.event || arguments.callee.caller.arguments[0];
		SmartPromptFocusHandler(evt);
	}
</script>

       <script src="pega_ui_harness_13772127907!!.js" type="text/javascript"></script>       <script src="pega_ui_harness_deferred_111883011!!.js" type="text/javascript"></script><style type="text/css"></style>     <script src="pzpega_ui_inspection_12954630003!!.js" type="text/javascript"></script>           <script src="dynamicselect_11792738933!!.js" type="text/javascript"></script>  </head><body class="harnessBody" onload="checkContainersExpanded();" onresize="doHarnessResize()"><input id="strDSSelectedMessage" type="hidden" value="Select..."> <input id="strDSNoDataMessage" type="hidden" value="No results were found."> <input id="strDSTimeoutMessage" type="hidden" value="Error: connection has timed out."> <script> strDSURL = "/prweb/PRServlet/pbdorj4V2aBoI4ScEONLsEaxdEWiqDby*/!TABTHREAD0"; </script>               <script src="webwb/pega_ui_textarea_14146791855.js!!.js" type="text/javascript"></script>     <script language="javascript"> var bClientValidation = 'true'; var bExpressionCalculation= ''; </script>      <script>function configure_rule_obj_validate(){rule_obj_validate('$PpyWorkPage$ppyLabel','','true','');}</script> <script> var form_submitCantProceed = "Please correct flagged fields before submitting the form!";  var date_patterns= ["EEEE d MMMM yyyy","yyyyMMdd","d MMMM yyyy","yyyy-MM-dd","d MMMM yyyy","dd-MMM-yy","dd/MM/yy","dd/MM/yy","dd/MM/yyyy","yyyy/M/d"];var datetime_patterns= ["EEEE d MMMM yyyy","yyyyMMdd","d MMMM yyyy","yyyy-MM-dd","d MMMM yyyy","dd-MMM-yy","dd/MM/yy","dd/MM/yy","dd/MM/yyyy","dd-MMM-yy h:mm:ss a","yyyyMMddTHHmmss.SSS z","yyyyMMddTHHmmss.SSS","yyyy-MM-ddTHH:mm:ss","yyyy-MM-ddTHH:mm:ss.SSSZ","EEEE d MMMM yyyy h:mm:ss a z","dd-MMM-yy h:mm:ss a","dd/MM/yy h:mm a","dd/MM/yy h:mm a","dd/MM/yyyy h:mm a","d MMMM yyyy h:mm:ss a z"];var time_patterns= ["h:mm:ss a","h:mm:ss a","HH:mm:ss","HH:mm:ss.SSSZ","HHmmss","h:mm:ss a z","h:mm:ss a z","h:mm:ss a","h:mm a"];var decimal_separator = ".";var grouping_separator = ",";var time_patterns_default = ["HH:mm", "h:mm", "HHmm"];time_patterns = time_patterns.concat(time_patterns_default);var amPmStrings =["AM","PM"];var months =["January","February","March","April","May","June","July","August","September","October","November","December"];var weekdays =["","Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"];var shortWeekdays =["","Sun","Mon","Tue","Wed","Thu","Fri","Sat"]; var date_separator = "/"; var date_datePos = 2; var date_monthPos = 1; var date_yearPos = 3;  var date_dateMsgStr = "is not a valid date value";  var time_timeMsgStr = "is not a valid time value"; var time_use24HourFormat = false;  var date_DateTimeMsgStr = "is not a valid date/time value";  var numeric_decimalMsgStr = "is not a valid decimal value";  var numeric_integerMsgStr = "is not a valid integer value";  var numeric_doubleMsgStr = "is not a valid double value";  var boolean_truefalseMsgStr = "is not a valid true/false value";  var required_requiredMsgStr = "Value cannot be blank";  var ruleEditValidate_isPosDecimalMsgStr = "Invalid input - reenter a decimal number greater than 0"; var ruleEditValidate_isNonNegativeMsgStr = "Enter a non-negative number"; var ruleEditValidate_isUrgencyValueMsgStr = "Invalid input - enter a number between 0 and 100"; var ruleEditValidate_isValidEmailAddressMsgStr = "Enter a valid email address"; var ruleEditValidate_isValidPhoneNumberMsgStr = "Enter a valid phone number"; var ruleEditValidate_isFutureDateMsgStr = "Enter a valid future date"; var ruleEditValidate_isNotFutureDateMsgStr = "Enter a valid past date"; var ruleEditValidate_isAlphabeticMsgStr = "Enter a valid alphabetic value"; var ruleEditValidate_isAlphaNumericMsgStr = "Enter a valid alphabetic or numeric value"; var ruleEditValidate_invalidFormatMsgStr = "The value entered is not matching with the format"; var ruleEditValidate_isAlphaNumericSpaceMsgStr = "Enter a valid Alphanumeric or space Value" ;  var length_minCharsMsg1 = "The field"; var length_minCharsMsg2 = "should be at least"; var length_minCharsMsg3= "characters long"; </script>                  <script src="webwb/pega_tools_xmldocument_1197443247.js!csvalid_12607657967.js!pega_validators_11589624033.js!input_formatter_11228896900.js!!.js" type="text/javascript"></script>        <script language="javascript"> pega.u.d.Locale = "en_IN"; /* Locale of the active requestor - HFIX-4964 */ pega.u.d.inStandardsMode = true;  pega.u.d.fieldValuesList = new Hashtable(); pega.u.d.fieldValuesList.put("Continue_work_Warning",'Continuing will replace your work in progress.'); pega.u.d.fieldValuesList.put("Wish_to_Continue",'Do you wish to continue?'); pega.u.d.fieldValuesList.put("ApplyFilter",'Apply'); pega.u.d.fieldValuesList.put("CancelFilter",'Cancel'); pega.u.d.fieldValuesList.put("enterToExpand",'press enter to expand row'); pega.u.d.fieldValuesList.put("enterToCollapse",'press enter to collapse row'); var gStrExpandAllText = 'Expand all'; var gStrCollapseAllText = 'Collapse All'; var gStrClickToExpandText = 'Click to expand '; var gStrClickToCollapseText = 'Click to collapse '; var gStrClickToCloseText = 'Click to close'; var NoModalInModal = 'Only one modal dialog can be opened at a time.'; var NotInAction= 'Local actions are available only when you are performing the assignment.'; var LocalNotInScreen='Local actions cannot be performed on a screen flow'; var FlowActionNotInAssignment='This flow action is not configured in the assignment'; var localCorrectErrors='Please correct current errors to perform this action.'; var bActionIframe = ''; var strHarnessMode = "ACTION"; var strSaveText = "Saving..."; var strSubmittingText="Submitting..."; var strHarnessPurpose = "Confirm"; var busyIndText = "";  var strPageName = "pyWorkPage"; pega.u.d.subscriptError= "subscript is not valid or is already in use."; pega.u.d.expandCollapseText = "Click to expand/collapse"; pega.u.d.actionIFrameReadyState = false;  pega.u.d.workLabel= 'Import Wizard'; pega.u.d.isAccessible = false; pega.u.d.bClientValidforReviewAction = true; pega.u.d.bWarnBeforeChangingWindow = false; pega.u.d.bShowFramePopup = true; pega.u.d.fieldValuesList.put("CLICK_TO_LOAD_TEXT",'Click here to load'); /* BUG-84746 added localization for some field values */ pega.u.d.fieldValuesList.put("REPLACE_WORKITEM_WARNING",'You are about to replace an open work item which has changes that have not been saved.'); pega.u.d.fieldValuesList.put("PRESS_OK_TO_CONTINUE",'Press OK to continue and lose your changes.'); pega.u.d.fieldValuesList.put("PRESS_CANCEL_TO_RETURN",'Press Cancel to return to the modified form.'); /* BUG-84746 added localization for some field values */ var systemNodeID = "3ba337806b4c903ce6520742af256001"; var systemName = "pega"; var applicationName = "PegaRULES";  var strHarnessClass = "PegaAccel-Management-Import"; var strKey = "PEGAACCEL"; var bReadOnly = "-1"; var strPrimaryPage = "pyWorkPage"; pega.u.d.formErrorType = "NONE"; pega.u.d.fieldErrorType = ""; pega.u.d.alwaysShowFormLevelErrors = "false"; pega.u.d.pyCustomError = "wizardErrors"; pega.u.d.bExcludeLegacyJS= ""; pega.u.d.portalID = ""; pega.u.d.portalName = "Developer"; pega.u.d.documentKey = "Import Wizard"; pega.u.d.documentTitle = "Import Wizard"; pega.u.d.documentTooltip = ""; pega.desktop.pyRequestorToken = '1'; pega.desktop.pxClientSession = 'H6730F6D1EB9FA48C6A8D8D7A85B70414'; var topWin = pega.desktop.support.getDesktopWindow() ; if(window == topWin && window.localStorage){ localStorage.setItem("pyRequestorToken"+pega.desktop.pxClientSession,pega.desktop.pyRequestorToken); localStorage.setItem("pyRequestorToken",pega.desktop.pyRequestorToken); } try{ /*BUG-128246 : Checking if DC is Present*/ var workarea = topWin.document.getElementById("workarea"); if(topWin && topWin.pega.u.d.harnessType && topWin.pega.u.d.harnessType == "layout" && workarea != null){ pega.u.d.stretchHarness = true; } }catch(e){ } pega.u.d.url = '/prweb/PRServlet/pbdorj4V2aBoI4ScEONLsEaxdEWiqDby*/!TABTHREAD0?&pzTransactionId=7d5674134357f165c0b72906fa38c23a&pzFromFrame=pyWorkPage&pzPrimaryPageName=pyWorkPage'; pega.u.d.primaryPageName ='pyWorkPage'; pega.u.d.keepFixedVisible = "true"; pega.u.d.harnessType = ''; pega.u.d.topHarness = ''; if(pega.u.d.harnessType && pega.u.d.harnessType == 'layout'){ pega.u.d.fieldValuesList.put("EXPAND_COLLAPSE_MESSAGE",'Click to expand/collapse'); } if(pega.u.d.keepFixedVisible == "") pega.u.d.keepFixedVisible = true;  pega.u.d.AccordionAnimSpeed = 1;   var strPyID=""; var strPyLabel="Import Archive";    var strPropertyName= "";    var indexInList =0;     var strDisplayHarnessParms="&FinishingActivity=DisplayHarness "+ "&Purpose=Confirm"+ "&AssignInsKey ="+ "&AssignTaskName=ASSIGNMENT255"+ "&AssignOperator= Administrator@pega.com";    function getNextWorkItem(event) { event = (event == undefined)?window.event : event; var userID = "Administrator%40pega.com"; var safeURL = new SafeURL(); safeURL.put("pyActivity", "GetNextWork"); safeURL.put("UserIdentifier", userID); doFormSubmit(safeURL,null,null,event); }  pega.util.Event.addListener(window,"beforeunload",pega.u.d.harnessOnBeforeUnload);    pega.u.d.attachOnload(pega.u.d.harnessOnLoad);  pega.util.Event.addListener(window,"unload",pega.u.d.harnessOnUnload,pega.u.d, true);       pega.u.d.processHarnessType = "Perform";      var confirm_harness_loaded = false;   </script>    
    <script src="webwb/wizard_scripts_1355825504.js!!.js" type="text/javascript"></script> <link href="webwb/pzharnessv2_e0479f3b2718244571d87cb6617e5a58d695ccf1e78b36644ace7920cd6deffd_0_11697146275.css!!.css" rel="stylesheet" type="text/css"><link href="webwb/pzharnessv2_e0479f3b2718244571d87cb6617e5a58d695ccf1e78b36644ace7920cd6deffd_1_13441310536.css!!.css" rel="stylesheet" type="text/css"><link href="webwb/pzharnessv2_e0479f3b2718244571d87cb6617e5a58d695ccf1e78b36644ace7920cd6deffd_2_14048300828.css!!.css" rel="stylesheet" type="text/css"><link href="webwb/pzharnessv2_e0479f3b2718244571d87cb6617e5a58d695ccf1e78b36644ace7920cd6deffd_3_12675841563.css!!.css" rel="stylesheet" type="text/css"> <script language="javascript"> pega.u.d.url = ' /prweb/PRServlet/pbdorj4V2aBoI4ScEONLsEaxdEWiqDby*/!TABTHREAD0?&pzTransactionId=7d5674134357f165c0b72906fa38c23a&pzFromFrame=pyWorkPage&pzPrimaryPageName=pyWorkPage'; </script>    <div id="FormErrorMarker_Div" style="display: none;"> </div><input id="pzHarnessID" type="hidden" value="HID1399794126178"> <script> pega.u.d.pyStreamNameForGadget = "Confirm"; </script>  <div id="PEGA_HARNESS" version="1" node_name="Confirm" data-ui-meta="{'type':'Harness','ruleName':'Confirm','insKey':'RULE-HTML-HARNESS PEGAACCEL-MANAGEMENT-IMPORT CONFIRM #20130919T014631.871 GMT'}" objclass="Rule-HTML-Harness" node_type="MAIN_RULE" inshandle="RULE-HTML-HARNESS PEGAACCEL-MANAGEMENT-IMPORT CONFIRM #20130919T014631.871 GMT" classname="PegaAccel-Management-Import"> <div id="HEADER_BUTTON_HTML" style="display: none;"> <table align="right" cellspacing="0" cellpadding="0"> <tbody><tr align="right" style="vertical-align: middle;">   </tr> </tbody></table> </div>  <form name="main" action="/prweb/PRServlet/pbdorj4V2aBoI4ScEONLsEaxdEWiqDby*/!TABTHREAD0?pyActivity=Show-Harness&amp;pzPrimaryPageName=pyWorkPage&amp;pzTransactionId=7d5674134357f165c0b72906fa38c23a&amp;pzFromFrame=pyWorkPage" method="post" autocomplete="off"> <input name="Purpose" type="hidden" value="Confirm"> <input name="ReadOnly" type="hidden" value="-1"> <input id="pyCustomErrorSection" type="hidden" value="wizardErrors">  <input name="ReadOnly" id="ReadOnly" type="hidden" value="-1"> <input name="HarnessPurpose" id="HarnessPurpose" type="hidden" value="Confirm"> <input name="FolderKey" type="hidden" value="">    <input name="InputEnabled" type="hidden" value="false">  <div class="modal-overlay" id="modalOverlay"><div class="modal-align-table"><div class="modal-align-cell"><div class="modal-wrapper" id="modalWrapper"><div class="modal-content" id="modalContent"></div></div></div></div></div> <div id="dirty-confirm-div" style="display: none;"> <div class="sectionDivStyle" id="RULE_KEY" version="1" node_name="pyDirtyCheckConfirm" data-ui-meta="{'type':'Section','ruleName':'pyDirtyCheckConfirm','insKey':'RULE-HTML-SECTION WORK- PYDIRTYCHECKCONFIRM #20130919T072655.812 GMT'}" uniqueid="SID1399794126185" expandrl="" base_ref="" name="BASE_REF" pyclassname="Work-" objclass="Rule-HTML-Section" node_type="MAIN_RULE" readonly="true"><table class="customTableBoxStyle" id="EXPAND-OUTERFRAME" cellspacing="0" cellpadding="0" param_name="EXPANDEDSubSectionpyDirtyCheckConfirmB"><tbody><tr><td><div class="hd" id="modaldialog_hd_dirty">
	<span>Confirm close</span>
	<button class="container-close" id="container_close" onclick="doModalAction('', event);" type="button"></button>
</div><div class="customExpandInnerDivStyle" section_index="1">
						<table cellspacing="0" cellpadding="0">
							<tbody><tr><td class="dataLabelRead" style="width: 594px; height: 49px; text-align: center;"><div class="modaldialog_con_dirty" id="modaldialog_con_dirty"> You are about to replace an open work item which has changes that has not been saved! </div></td>
							</tr>
							</tbody></table><input name="EXPANDEDSubSectionpyDirtyCheckConfirmB" id="EXPAND-INDICATOR" type="hidden" value=""></div></td></tr></tbody></table><span class="inspector-span" data-ui-meta="{'type':'Layout'}">
						<table width="100%" cellspacing="0" cellpadding="0" section_index="3">
							<tbody><tr><td class="dataValueRead" style="width: 50%; text-align: right; vertical-align: top;" data-ui-meta="{'type':'Cell','subType':'pxButton','className':'PegaAccel-Management-Import'}"><nobr><span><button class="pzhc" type="button" data-ctl="" data-click='[["setUserStart",["CANCEL"]],["doClose",[":event", null, null, true]]]'><div class="pzbtn-rnd"><div class="pzbtn-lft" data-click=".."><div class="pzbtn-rgt" data-click="..."><div class="pzbtn-mid" data-click="...."><img class="pzbtn-i" alt="" src="webwb/zblankimage.gif">Discard<img class="pzbtn-i" alt="" src="webwb/zblankimage.gif"></div></div></div></div></button></span></nobr></td><td class="dataValueRead" style="width: 50%; text-align: left; padding-left: 5px; vertical-align: top;" data-ui-meta="{'type':'Cell','subType':'pxButton','className':'PegaAccel-Management-Import'}"><nobr><span><button class="pzhc" type="button" data-ctl="" data-click='[["closeContainer", [":event"]]]'><div class="pzbtn-rnd"><div class="pzbtn-lft" data-click=".."><div class="pzbtn-rgt" data-click="..."><div class="pzbtn-mid" data-click="...."><img class="pzbtn-i" alt="" src="webwb/zblankimage.gif">Cancel<img class="pzbtn-i" alt="" src="webwb/zblankimage.gif"></div></div></div></div></button></span></nobr></td>
							</tr>
							</tbody></table></span></div> </div>  <input name="$PpyWorkPage$ppySpecialtyComponentData" id="pySpecialtyComponentData" type="hidden" value="">  <div class="harnessContent" id="HARNESS_CONTENT">   <div data-ui-meta="{'type':'Container'}">  <div id="containerHeader"> 


<div id="HeaderDiv" style="display: block;">
<table width="100%" border="0" cellspacing="0" cellpadding="0">
    <tbody><tr>
        <td height="35" align="left" class="dialogHeaderBackground" id="topBanner" valign="middle">
            <table width="100%" border="0" cellspacing="0" cellpadding="0">
                <tbody><tr>
                    <td></td>
                    <td width="28" class="coverTabMiddle_on" valign="top"><span class="iconWizard">&nbsp;</span></td>
                    <td></td>
                    <td class="wizardTitle coverTabMiddle_on" style="color: rgb(255, 255, 255);">
                        Importing HRServicesSample_rules.jar from HRServicesSample.jar
                    </td>
                    <td class="tdRightStyle coverTabMiddle_on" valign="top">

		
		
		
		<div class="sectionDivStyle" id="RULE_KEY" version="1" node_name="pzLPContextSensitiveHelp" data-ui-meta="{'type':'Section','ruleName':'pzLPContextSensitiveHelp','insKey':'RULE-HTML-SECTION @BASECLASS PZLPCONTEXTSENSITIVEHELP #20130919T012128.822 GMT'}" uniqueid="SID1399794126186" expandrl="" base_ref="pyWorkPage" name="BASE_REF" pyclassname="@baseclass" objclass="Rule-HTML-Section" node_type="MAIN_RULE" readonly="true"><div class="layout layout-none"><div class="layout-body" section_index="1"><div class="content layout-content-inline_middle content-inline_middle  "><div class="content-item content-field item-1 remove-all-spacing   " data-ui-meta="{'type':'Cell','subType':'pxIcon','className':'PegaAccel-Management-Import'}" reserve_space="false" string_type="field"><div class="content-inner "><div class="field-item dataValueRead"><span><i class="icons" style="width: 16px; height: 16px;"><img tabindex="0" title="Help about this landing page " role="link" alt="Help about this landing page " src="webwb/pzapmodalicon_help_14258173954.png!!.png" data-ctl="Icon" data-click='[["openUrlInWindow", ["#~pyWorkPage.pxHelpURI~#?", "ShowHelp", "height=600,width=800,location=0,menubar=0,toolbar=0,status=0,resizable=1,location=0,scrollbars=1", "false",":event"]]]'></i></span></div></div></div><span><input name="$PpyWorkPage$ppxHelpURI" id="pxHelpURI" type="hidden" value="http://localhost:8080/prhelp/tools/moverules/aboutmoverules.htm" data-ctl=""></span></div></div></div></div>

		
		                   
                    </td>
                </tr>
            </tbody></table>
        </td>
    </tr>
</tbody></table>
</div>

</div>  <table width="100%" class="containerBody" cellspacing="0" cellpadding="0"> <tbody><tr> <td>  <div class="harnessBodyCustom">    <div style="height: 40px;">&nbsp;</div> <div align="center" style="width: 100%;"> <div style="width: 820px;"> <link href="css/progressbar.css" rel="stylesheet" type="text/css"> <script language="javascript"> function ProgBar(containerID, opCount, totalOpCount, completeColor) { this.containerID = containerID; this.opCount = opCount; this.totalOpCount = totalOpCount; this.completeColor = completeColor; this.containerElem = null; this.completedElem = null; this.dataObj = null; this.progressCallbacks = new Array(); this.borderSize = 1; this.paddingSize = 1; this.initialize(); } ProgBar.prototype.constructor = ProgBar; ProgBar.prototype.getPixels = function (s) { return new Number(s.replace("px","")).valueOf(); }; ProgBar.prototype.addProgressCallback = function (callback) { this.progressCallbacks.push(callback); }; ProgBar.prototype.getNestedElementSizeCorrection = function() { return 2*(this.borderSize + this.paddingSize); }; ProgBar.prototype.createDIV = function (id, w, h) { var elem = document.createElement("div"); elem.id = id; elem.style.margin = "0px"; elem.style.border = "0px"; elem.style.padding = "0px"; elem.style.width = w + "px"; elem.style.height = h + "px"; return elem; }; ProgBar.prototype.getWidth = function() { var w = this.containerElem.width; if (w==null) { w = this.containerElem.style.width; } w = this.getPixels(w); return w; }; ProgBar.prototype.getHeight = function() { var h = this.containerElem.height; if (h==null) { h = this.containerElem.style.height; } h = this.getPixels(h); return h; }; ProgBar.prototype.getContainedWidth = function() { var w = this.pcontainer.width; if (w==null) { w = this.pcontainer.style.width; } w = this.getPixels(w); return w; }; ProgBar.prototype.getContainedHeight = function() { var h = this.pcontainer.height; if (h==null) { h = this.pcontainer.style.height; } h = this.getPixels(h); return h; }; ProgBar.prototype.createBorderDiv = function(w, h) { var elem = document.createElement("div"); elem.style.width = w + "px"; elem.style.height = h + "px"; if (this.borderSize>0) { elem.style.borderWidth = this.borderSize + "px"; elem.style.borderStyle = "solid"; elem.style.borderColor = "#cccccc #003333 #003333 #cccccc"; } if (this.paddingSize>0) { elem.style.padding = this.paddingSize + "px"; } elem.style.top = "0px"; elem.style.left = "0px"; return elem; }; ProgBar.prototype.overwriteProgDivs = function(completedW) { var h = this.getContainedHeight(); var cpElem = this.createDIV("completedProgress", completedW, h); cpElem.style.position = "absolute"; cpElem.style.border = "0px"; cpElem.style.top = "0px"; cpElem.style.left = "0px"; cpElem.style.backgroundColor = this.completeColor; this.pcontainer.innerHTML = ""; this.pcontainer.appendChild(cpElem); }; ProgBar.prototype.initialize = function () { this.containerElem = document.getElementById(this.containerID); if (this.containerElem==null) { alert("Couldn't find container element for ID '" + this.containerID + "'."); return; } /* size correction for nested elements */ var sc = this.getNestedElementSizeCorrection(); var w = this.getWidth(); var h = this.getHeight(); this.containerElem.innerHTML = ""; var borderElem = this.createBorderDiv(w - sc, h - sc); var pcElem = this.createDIV("progBarCont", w - (2*sc), h - (2*sc)); pcElem.style.position = "relative"; pcElem.style.top = "0px"; pcElem.style.left = "0px"; this.pcontainer = pcElem; borderElem.appendChild(this.pcontainer); this.overwriteProgDivs(0, w - sc); this.containerElem.appendChild(borderElem); }; ProgBar.prototype.getOpCount = function () { return this.opCount; }; ProgBar.prototype.setOpCount = function (opCount) { this.opCount = opCount; }; ProgBar.prototype.getTotalOpCount = function () { return this.totalOpCount; }; ProgBar.prototype.setTotalOpCount = function (totalOpCount) { this.totalOpCount = totalOpCount; }; ProgBar.prototype.updateOpCount = function (opCount) { this.opCount = opCount; this.processProgressCallbacks(); this.render(); }; ProgBar.prototype.render = function () { var w = this.getContainedWidth(); var cpWidth = 0; if (this.totalOpCount!=0) { cpWidth = Math.round((this.opCount * w)/ this.totalOpCount); } var rpWidth = w - cpWidth; this.overwriteProgDivs(cpWidth, rpWidth); }; ProgBar.prototype.processProgressCallbacks = function() { for (var i=0; i<this.progressCallbacks.length; i++) { this.progressCallbacks[i](this.dataObj); } }; ProgBar.prototype.setDataObject = function(obj) { this.dataObj = obj; }; ProgBar.prototype.getDataObject = function() { return this.dataObj; }; </script> <script type="text/javascript"> /* Adds an event handler to an object in a X-browser way */ function AddEvent(html_element, event_name, event_function) { if(html_element.attachEvent) /*Internet Explorer*/ html_element.attachEvent("on" + event_name, function() {event_function.call(html_element);}); else if(html_element.addEventListener) /*Firefox & company*/ html_element.addEventListener(event_name, event_function, false); } var gXHR = null; /* Obtains the X-browser equivalent of a XMLHttpRequest object */ function getXHR() { if (gXHR!=null) { return gXHR; } try { gXHR = new XMLHttpRequest(); return gXHR; } catch(e) { } try { gXHR = new ActiveXObject("Msxml2.XMLHTTP.3.0"); return gXHR; } catch(e) { } try { gXHR = new ActiveXObject("Msxml2.XMLHTTP"); return gXHR; } catch(e) { } try { gXHR = new ActiveXObject("Microsoft.XMLHTTP"); return gXHR; } catch(e) { alert(e); } return gXHR; } /** provides a means to make X-browser asynchronous AJAX calls */ function makeAjaxCall(aURL, aCallBack) { var xhr = getXHR(); if (xhr!=null) { xhr.open("GET", aURL, true); xhr.onreadystatechange = function() { if (xhr.readyState==4) { if (xhr.responseText) { aCallBack(xhr.responseText); } } }; xhr.send(null); } else { alert("this browser doesn't support XMLHttpRequest object!!!!"); } } function makeSyncRequest(aURL) { var xhr = getXHR(); if (xhr!=null) { xhr.open("GET", aURL, false); xhr.send(null); return xhr.responseText; } else { alert("this browser doesn't support XMLHttpRequest object!!!!"); } return null; } /* X-broswer XML parsing routines */ function getXMLDocument(aXML) { var xmlDoc = null; if (window.DOMParser) { try { parser=new DOMParser(); xmlDoc=parser.parseFromString(aXML,"text/xml"); } catch (e) { /* parsing error */ return null; } } else { /*IE*/ parser = new ActiveXObject("Microsoft.XMLDOM"); parser.async=false; var bSuccess = parser.loadXML(aXML); if (!bSuccess) { return null } xmlDoc = parser; } return xmlDoc; } /* retrieve text from an XML element */ function getElementText(aElement) { if (aElement.textContent==undefined) { return aElement.text; } return aElement.textContent; } function resolvePath(aXMLElem, aPathElems) { var currElemName = aPathElems.pop(); var nl = aXMLElem.getElementsByTagName(currElemName); if (nl.length>0) { var elem = nl[0]; if (aPathElems.length==0) { return getElementText(elem); } else { return resolvePath(elem, aPathElems); } } else { return null; } } function getElementVal(aXMLDoc, aDocPath) { if (aDocPath==null || aDocPath=="" || aXMLDoc==null) return ""; var pathElements = aDocPath.split("/"); var pathElems = new Array(); for (var i=0; i < pathElements.length; i++) { pathElems.push(pathElements[i]); } pathElems.reverse(); return resolvePath(aXMLDoc, pathElems); }  function log(msg) { if (window.console!='undefined') { console.log(msg); } } function setInnerText(elem, txt) { if (elem.innerText!=null) { elem.innerText = txt; } else { elem.textContent = txt; } } /* An integer identifier that specifies the timed interval event for drawing the progress bar. */ var iTimerID = ""; /* A string value of "zip", "unzip", or "skimming" indicating the type of action we're displaying progress for. */ var strMode = "unzip"; /* The message if a error caused the entire process to halt. */ var strFatalMessage = ""; /* A string to hold the car was import restart message */ var carMsgFlag = 'false'; var carMsg = ""; if (carMsgFlag == 'true') { carMsg = " - Import included Code Archives, restart PRPC to activate"; } /* A string containing the real number of records to be processed */ var pyTotalRecords = ''; /* A string containing the total number of records skipped */ var pyRecordsSkipped = ''; /* A string value holding the pzInsKey property of the Log-PegaRULESMove page (the key part). */ var strInsKey = ''; /* A string value holding the activity property of the activity being run. */ var strActivity = ''; /* A string value holding the pxCreateDateTime property of the Log-PegaRULESMove page (the key part). */ var strCreateDateTime = '20140511T074206.171 GMT'; /* A string value holding the URI prefix required to call Rule-Obj-Activity rules. */ var strRequestorURIprogress = '/prweb/PRServlet/pbdorj4V2aBoI4ScEONLsEaxdEWiqDby*/!TABTHREAD0'; /* An array of pre-startup callbacks -- listeners will recieve no parameters */ var funcPreProgressCallbacks = new Array(); /* An array of progress listener callback -- listeners will be passed the current progress as a parameter. */ var funcProgressListenerCallbacks = new Array(); var progressBar = null; function showStatDiv(aElem) { if (aElem.style.display!="block") aElem.style.display="block"; } function hideStatDiv(aElem) { if (aElem.style.display!="none") aElem.style.display="none"; } function adjustStatistics(aIsAppBundle, aCompleteInstanceCounts) { var divTotalRecords = document.getElementById("divTotalRecords"); var divSubArchive = document.getElementById("divSubArchive"); var divTotalRecordsMoved = document.getElementById("divTotalRecordsMoved"); var divTotalImportedInstanceCount = document.getElementById("divTotalImportedInstanceCount"); var divSubArchive2 = document.getElementById("divSubArchive2"); var divTimeLeft = document.getElementById("divTimeLeft"); if (aIsAppBundle && !aCompleteInstanceCounts) { hideStatDiv(divTotalRecords); showStatDiv(divSubArchive); hideStatDiv(divTotalRecordsMoved); showStatDiv(divTotalImportedInstanceCount); hideStatDiv(divSubArchive2); hideStatDiv(divTimeLeft); } else if (aIsAppBundle && aCompleteInstanceCounts) { showStatDiv(divTotalRecords); hideStatDiv(divSubArchive); showStatDiv(divTotalRecordsMoved); hideStatDiv(divTotalImportedInstanceCount); showStatDiv(divSubArchive2); } else { /* assume we're dealing with a PAR file and not an app bundle */ showStatDiv(divTotalRecords); hideStatDiv(divSubArchive); showStatDiv(divTotalRecordsMoved); hideStatDiv(divTotalImportedInstanceCount); hideStatDiv(divSubArchive2); } } /* Displays the progress bar. */ function drawProgBar() { /* Used to send an HTTP request directly to the web server and load the server response data. */ var xmlhttp = getXHR(); /* If we have a pzInsKey, use that before using pyCreateDateTime * Specify that we would like to open the Log page. */ var strReturn = null; if(strInsKey != null && strInsKey != "") { /* PegaAccel-Management-Import.pxGetImportStatus calls Log-PegaRULESMove.Open and prevents pyWorkPage from being passivated... */ strReturn = makeSyncRequest(strRequestorURIprogress + "?pyActivity=PegaAccel-Management-Import.pxGetImportStatus&openHandle=" + escape(strInsKey)); } else if (strCreateDateTime != null && strCreateDateTime != "") { strReturn = makeSyncRequest(strRequestorURIprogress + "?pyActivity=PegaAccel-Management-Import.pxGetImportStatus&pyCreateDateTime=" + escape(strCreateDateTime)); } /* A case sensitive string value indicating if the processing is 'Done' or not. */ var strOperStatus = ""; /* A string value indicating the total number of records to be processed. */ var strTotalRecords = ""; /* A string value indicating the total number of records that have been moved. */ var strRecordsMoved = ""; /* A string value indicating the total number of records intentionally not moved. */ var strRecordsSkipped = ""; /* A string value indicating the total number of records that were not moved because of errors. */ var strTotalErrors = ""; /* A string value indicating the estimated amount of time it will take to complete. */ var strTimeLeft = ""; /* The name of the file being processed. */ var strFileName = ""; /* A string boolean value which indicates if we need to compile Rule-Utility-Library's or not. */ var strGenerateLibrary = ""; /* A string value indicating if library complation was successful ('good') or not ('fail') * or if it did not occur (empty string). */ var strCompilationStatus = ""; /* (Currently not used) If we are importing (strMode == 'unzip'), * this is the pzInsKey of the Rule-Admin-Product being imported. */ var strProductKey = ""; /* (Currently not used) A string boolean indicating if a post installation activity should be executed. */ var strExecuteInstallActivity = ""; /* An integer value indicating the total number of records to be processsed. */ var nTotRec = 0; /* An integer value indicating the total number of records processed (moved + skipped + errors). */ var nRecProc = 0; /* An integer value indicating the percentage the processing is complete. (processed / to be processed) */ var nPercent = 0; /* A string value indicating the percentage the processing is complete. (e.g. "93%") */ var strPercentage = ""; /* An integer value between 0 and 100 indicating the fullness of the progress bar. */ var nProgress = 0; /* Indicates the component of that the is currently being imported from an app bundle */ var strSubArchive = ""; /* Total number of instances imported from PAR files only when performing an app bundle import containing PAR files that do not contain instance count data */ var strTotalImportedInstanceCount = ""; /* Indicates whether we are processing an app bundle. */ var strIsAppBundle = ""; var bIsAppBundle = false; /* Indicates whether we are processing an app bundle. */ var strCompleteInstanceCounts = ""; var bCompleteInstanceCounts = false; /* Load XML response data into an object */ var objDoc = getXMLDocument(strReturn); if (objDoc!=null) { /* Acquire the XML document root (the <pagedata> element). */ var objRoot = objDoc.documentElement; /* Check to see if there has been a fatal error. */ if (getElementVal(objDoc, "pagedata/pyFatalMessage") != null) { strFatalMessage = getElementVal(objDoc, "pagedata/pyFatalMessage"); } if (strFatalMessage != "") { /* A fatal error occurred.*/ /* Set the CSS class for the message label.*/ lblMessage.className = "ProglabelDone"; /* Set the message label text to the fatal error message.*/ lblMessage.innerHTML = strFatalMessage; /* Reset the submit button if the parent has the function defined.*/ if (parent.reset_SubmitButton) { parent.reset_SubmitButton(); } /* Display the message if SQL failure*/ if(strFatalMessage.indexOf("SQL:") > -1) messagesDiv.innerHTML = "<table width='100%'><tr><td width='50'></td><th colspan=2>"+strFatalMessage.slice(0, strFatalMessage.indexOf("SQL:"))+"</th><br/></tr><tr></tr>"+ "<tr><td width='50'></td><td width='50'>SQL:</td><td>"+strFatalMessage.slice(strFatalMessage.indexOf("SQL:")+4, strFatalMessage.indexOf("ERROR:"))+"</td></td>"+ "<tr><td width='50'></td><td width='50'>Error:</td><td>"+strFatalMessage.slice(strFatalMessage.indexOf("ERROR:")+6)+"</td></tr></table>"; /* Stop the continuous drawing of the progress bar.*/ window.clearInterval(iTimerID); /* Stop the current drawing of the progress bar.*/ strOperStatus = "Done"; broadcastProgressUpdate(nPercent, strOperStatus); return; } /* Display the progress bar.*/ tbProgBar.style.display = "block"; /* Acquire properties from the Log-Page */ if (getElementVal(objDoc, "pagedata/pyPercentageComplete") != null) { strPercentage = getElementVal(objDoc, "pagedata/pyPercentageComplete"); } if (getElementVal(objDoc, "pagedata/pyTotalRecords") != null) { strTotalRecords = getElementVal(objDoc, "pagedata/pyTotalRecords"); } if (getElementVal(objDoc, "pagedata/pyRecordsMovedCount") != null) { strRecordsMoved = getElementVal(objDoc, "pagedata/pyRecordsMovedCount"); } if (getElementVal(objDoc, "pagedata/pyRecordsSkippedCount") != null) { strRecordsSkipped = getElementVal(objDoc, "pagedata/pyRecordsSkippedCount"); } if (getElementVal(objDoc, "pagedata/pyErrorsCount")) { strTotalErrors = getElementVal(objDoc, "pagedata/pyErrorsCount"); } if (getElementVal(objDoc, "pagedata/pyTimeLeft") != null) { strTimeLeft = getElementVal(objDoc, "pagedata/pyTimeLeft"); } if (getElementVal(objDoc, "pagedata/pyOperationStatus") != null) { strOperStatus = getElementVal(objDoc, "pagedata/pyOperationStatus"); } if (getElementVal(objDoc, "pagedata/pyGenerateLibrary") != null) { strGenerateLibrary = getElementVal(objDoc, "pagedata/pyGenerateLibrary"); } if (getElementVal(objDoc, "pagedata/pyLibraryCompilationStatus") != null) { strCompilationStatus = getElementVal(objDoc, "pagedata/pyLibraryCompilationStatus"); } if (getElementVal(objDoc, "pagedata/pyExecuteInstallActivity") != null) { strInstallActivity = getElementVal(objDoc, "pagedata/pyExecuteInstallActivity"); } if (getElementVal(objDoc, "pagedata/pySubArchive") != null) { strSubArchive = getElementVal(objDoc, "pagedata/pySubArchive"); document.getElementById("lblSubArchive").innerHTML = strSubArchive; document.getElementById("lblSubArchive2").innerHTML = strSubArchive; } if (getElementVal(objDoc, "pagedata/pyTotalImportedInstanceCount") != null) { strTotalImportedInstanceCount = getElementVal(objDoc, "pagedata/pyTotalImportedInstanceCount"); document.getElementById("lblTotalImportedInstanceCount").innerHTML = strTotalImportedInstanceCount; } if (getElementVal(objDoc, "pagedata/pyIsAppBundle") != null) { strIsAppBundle = getElementVal(objDoc, "pagedata/pyIsAppBundle"); strIsAppBundle = strIsAppBundle.toLowerCase(); bIsAppBundle = (strIsAppBundle=="true") ? true : false; } if (getElementVal(objDoc, "pagedata/pyCompleteInstanceCounts") != null) { strCompleteInstanceCounts = getElementVal(objDoc, "pagedata/pyCompleteInstanceCounts"); strCompleteInstanceCounts = strCompleteInstanceCounts.toLowerCase(); bCompleteInstanceCounts = (strCompleteInstanceCounts=="true") ? true : false; } adjustStatistics(bIsAppBundle, bCompleteInstanceCounts); if (getElementVal(objDoc, "pagedata/pyFileName") != null) { strFileName = getElementVal(objDoc, "pagedata/pyFileName"); strFileName = strFileName.substring(strFileName.lastIndexOf('/') + 1, strFileName.length); } if (getElementVal(objDoc, "pagedata/pyProductKey") != null) { strProductKey = getElementVal(objDoc, "pagedata/pyProductKey"); strProductKey = zUtil_reformatString(strProductKey, "#", "%23"); } /* Set the Total Records, Records Moved, and Records Skipped Values */ /* Check to see if we need to correct the Log page values.*/ if ((pyTotalRecords != "") && (pyTotalRecords != strTotalRecords)) { strTotalRecords = pyTotalRecords; strRecordsSkipped = pyRecordsSkipped; } /* Post the total number of records, and convert to integer for percentage calculation.*/ setInnerText(lblTotalRecords, strTotalRecords); if (strTotalRecords != "") { nTotRec = parseInt(strTotalRecords); } /* Post the number of records moved, and add it to the number of records processed.*/ setInnerText(lblTotalRecordsMoved, strRecordsMoved); if (strRecordsMoved != "") { nRecProc += parseInt(strRecordsMoved); } /* Post the number of records skipped, and add it to the number of records processed.*/ setInnerText(lblTotalRecordsSkipped, strRecordsSkipped); if (strRecordsSkipped != "") { nRecProc += parseInt(strRecordsSkipped); } /* Post the number of errors.*/ setInnerText(lblTotalErrors, strTotalErrors); /* Determine how much of the progess bar should be filled. */ nPercent = parseInt(strPercentage); if (isNaN(nPercent) || (nPercent > 100) || (nPercent < 0)) { if ((nTotRec > 0) && (nRecProc > 0)) { nPercent = parseInt((nRecProc / nTotRec) * 100); strPercentage = nPercent + "%"; nProgress = Math.floor(nPercent); } else { nProgress = 0; } } else { nProgress = Math.floor(nPercent); } /* Post the percentage and time left.*/ setInnerText(lblPercentage, strPercentage); setInnerText(lblTimeLeft, strTimeLeft); if (strOperStatus.toLowerCase() != "done") { /* Set the action message.*/ if (strMode.toLowerCase() == "unzip") { setInnerText(lblMessage, "Saving data to the database from file " + strFileName); } else if (strMode.toLowerCase() == "skimming") { setInnerText(lblMessage, "Saving data to the database."); } else if (strMode.toLowerCase() == "upgrade") { setInnerText(lblMessage, "Status of "+ strActivity + " activity: " + strOperStatus); } else if (nRecProc > 0) { /* "zip"*/ setInnerText(lblMessage, "Saving data to file " + strFileName); } } else { /* we are done!*/ /* Stop the continuous call of this function.*/ window.clearInterval(iTimerID); /* Indicate the progress bar should be set to full.*/ nProgress = 100; if (strMode.toLowerCase() == "unzip") { setInnerText(lblMessage, "Import complete to database from the file " + strFileName + ": " + carMsg); try { /* Attempt to re-enable the button to load data into database.*/ parent.document.getElementById("btnLoad").disabled = false; } catch (exception) {} /* Report on library generation results, if neccessary.*/ if (strGenerateLibrary.toLowerCase() == "true") { if (strCompilationStatus == "") { setInnerText(lblMessage1, "The file contains no libraries/functions"); } else if (strCompilationStatus.toLowerCase() != "good") { setInnerText(lblMessage1, "Errors in libraries compilation"); lblMessage1.style.color = "red"; displayCompileErrors(); } lblMessage1.style.display = "block"; } /* Execute installation activity, if provided.*/ if ((strProductKey != "") && (strExecuteInstallActivity.toLowerCase() == "true")) { var strUrl = strRequestorURIprogress + "?pyActivity=Rule-Admin-Product.PostUpload&productKey=" + strProductKey; var objWnd = window.open(strUrl,"Product", "status=yes,toolbar=no,menubar=no,location=no," + "scrollbars=yes,resizable=yes,width=600,heigth=800"); objWnd.focus(); } } else if (strMode.toLowerCase() == "skimming") { setInnerText(lblMessage, "Skimming Complete"); } else if (strMode.toLowerCase() == "upgrade") { setInnerText(lblMessage, strActivity+" Activity Complete"); } else { /* zip*/ /* Provide a download link to save the file locally.*/ var strFilePath = 'http://10.150.111.38:9080/prweb/PRServlet/pbdorj4V2aBoI4ScEONLsEaxdEWiqDby*/ServiceExport' + '/' + strFileName; lblMessage.innerHTML = "<html><a class=ProgLabel href=\"" + strFilePath + "\">" + "<U><B>Zip file created. Click here to save " + strFileName + " file locally</B></U></a></html>"; try { /* Re-enable the button to Create Zip File if it is present*/ parent.document.getElementById("butCreateZipFile").disabled = false; } catch (exception) {} } /* Display errors, if necessary.*/ if (parseInt(strTotalErrors) > 0) { lblErrorsLabel.className = "ShowError"; lblTotalErrors.className = "ShowError"; } } /* Finally, display the progress.*/ if (progressBar==null && nTotRec!=0) { progressBar = new ProgBar("progBarContainer", 0, nTotRec, "#123456"); } if (progressBar!=null) { progressBar.updateOpCount(nRecProc); } } /* And lastly, call the progress listeners... */ broadcastProgressUpdate(nPercent, strOperStatus); } function broadcastProgressUpdate(aPercent, aOperStatus) { var fatalError = strFatalMessage != ""; for (var i=0; i<funcProgressListenerCallbacks.length; i++) { funcProgressListenerCallbacks[i](aPercent, aOperStatus, fatalError); } } function invokePreProgressCallbacks() { for (var i=0; i<funcPreProgressCallbacks.length; i++) { funcPreProgressCallbacks[i](); } } var gStartAttempts = 0; /* Starts the calling of the progress display */ function startProgBar() { /* the purpose of this if block is to make sure that any startup hooks have had a chance to be registered before starting up the progress bar loop. This should make sure that there is adequate opportunity to disable buttons (or any other pre-start tasks) first. */ if (funcPreProgressCallbacks.length==0 && gStartAttempts<3) { ++gStartAttempts; window.setTimeout(startProgBar, 1000); return; } /* call any startup hooks */ invokePreProgressCallbacks(); setInnerText(lblActionTaken, "Moved"); if (strMode.toLowerCase() == "unzip" ) { setInnerText(lblMessage, "Please wait ...reading zip file."); } else { lblMessage.innerHTML = "Please wait ...getting records from the database."; if (strMode.toLowerCase() == "upgrade") { setInnerText(lblActionTaken, "Processed"); tdTimeLeft.style.display = "none"; } } drawProgBar(); /* Start drawing the progress bar every 5 seconds.*/ iTimerID = window.setInterval(drawProgBar,5000); } /* Displays the error page. */ function showErrors() { var strUrl = strRequestorURIprogress + "?pyActivity=Log-PegaRULESMove.Show&pyCreateDateTime=" + escape(strCreateDateTime); /*if we have the key, use that instead*/ if(strInsKey != null && strInsKey != "") { strUrl = strRequestorURIprogress + "?pyActivity=Log-PegaRULESMove.Show&openHandle=" + escape(strInsKey); } var objWnd = window.open(strUrl,"MoveErrors", "status=yes,toolbar=no,menubar=no,location=no," + "scrollbars=yes,resizable =yes,width=600,heigth=800"); objWnd.focus(); } /* Displays the compilation errors. */ function displayCompileErrors() { var sQuery = strRequestorURIprogress + "?pyActivity=@baseclass.showCompileErrors" + "&pyCreateDateTime=" + strCreateDateTime; var strLibNames = makeSyncRequest(sQuery); if (strLibNames != "Compile succeeded") { var arrLibNames = strLibNames.split(","); var arrLength = arrLibNames.length; var alertText = "The following Libraries failed to compile: "; alert(alertText + strLibNames); } } pega.util.Event.onDOMReady(startProgBar); </script> <div id="messagesDiv"></div> <br> <div id="messagesDivDetails"></div> <table align="center" class="ProgBarOuterTable" id="tbProgBar" style="display: block;"> <tbody><tr> <td> <span class="ProgLabel" id="lblMessage">Import complete to database from the file HRServicesSample_rules.jar: </span> <span class="ProgLabel" id="lblMessage1" style="display: none;">Libraries compiled successfully</span> </td> </tr> <tr> <td>&nbsp;</td> </tr> <tr> <td align="middle"><label class="ProgLabelPercent" id="lblPercentage">100.00%</label></td> </tr> <tr> <td> <div id="progBarContainer" style="width: 600px; height: 26px;" width="600px" height="26px"><div style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 51, 51) rgb(0, 51, 51) rgb(204, 204, 204); padding: 1px; left: 0px; top: 0px; width: 596px; height: 22px;"><div id="progBarCont" style="margin: 0px; padding: 0px; border: 0px currentColor; border-image: none; left: 0px; top: 0px; width: 592px; height: 18px; position: relative;"><div id="completedProgress" style="margin: 0px; padding: 0px; border: 0px currentColor; border-image: none; left: 0px; top: 0px; width: 592px; height: 18px; position: absolute; background-color: rgb(18, 52, 86);"></div></div></div></div> </td> </tr> <tr> <td align="right" class="ProgLabel" id="tdTimeLeft"><div id="divTimeLeft">Time Left: <label id="lblTimeLeft">0 seconds</label></div></td> </tr> <tr> <td> <table width="100%"> <tbody><tr> <td class="ProgLabel" style="width: 25%;"> <div id="divTotalRecords" style="display: block;">Total Records: <label id="lblTotalRecords">400</label></div> <div id="divSubArchive" style="display: none;">Currently Processing: <label id="lblSubArchive"></label></div> </td> <td class="ProgLabel" style="width: 25%;"> <div id="divTotalRecordsMoved" style="display: block;">Records <label id="lblActionTaken">Moved</label>: <b><label id="lblTotalRecordsMoved">25</label></b></div> <div id="divTotalImportedInstanceCount" style="display: none;">Total Instances: <b><label id="lblTotalImportedInstanceCount">0</label></b></div> </td> <td class="ProgLabel" style="width: 25%;">Records Skipped: <label id="lblTotalRecordsSkipped">375</label></td> <td style="width: 25%;"><u><label class="ProgLabelClickable" id="lblErrorsLabel" onclick="showErrors()">Total Errors: </label> <label class="ProgLabelClickable" id="lblTotalErrors">0</label></u> </td> </tr> <tr> <td class="ProgLabel" colspan="4"><div id="divSubArchive2" style="display: none;">Currently Processing: <label id="lblSubArchive2"></label></div></td> </tr> </tbody></table> </td> </tr> </tbody></table> <script language="javascript">

/* List of HTML elements that correspond to buttons. */
var wizardButtonElemList = new Array();

/* List of button description corresponding to the list elements
   of wizardButtonElemList. */
var wizardButtonDescList = new Array();

/* Lowercase and trim a string. */
function reformat(btnName) {
   return btnName.replace(/^\s\s*/, "").replace(/\s\s*$/, "").toLowerCase();
}

/* Re-enable buttons. */
function enableButtons(fatalError) {
   for (var i=0; i<wizardButtonElemList.length; i++) {
		if(wizardButtonElemList[i].innerHTML.indexOf('Next') == -1 || !fatalError)
			disenable(wizardButtonElemList[i], false);
   }
}

/* This is the progress bar update callback function. */
function enableImportWizardButtons(progress, status, fatalError) {
   var s = status.toLowerCase();
   if (s=="done") {
      enableButtons(fatalError);
   }
}

/* Finds the enclosing table element. */
function findEnclosingTableElement(elem) {
   var parent = null;
   while ((parent = elem.parentNode)!=null) {
      var tn = parent.tagName;
      if (tn!=null && tn.toLowerCase()=="table")
         return parent;
      
      elem = parent;
   }
}

function getInnerText(elem) {
   if (elem.innerText!=null) {
      return elem.innerText;
   }
   return elem.textContent;
}

/* Finds all of the buttons in the current document. */
function findButtonsInChildren(elem) {
   if(elem.hasChildNodes()) {
      var children = elem.childNodes;
      for (var i=0; i<children.length; i++) {
         var c = children[i];
         var tn = c.tagName;
         
         if (tn==null)
            continue;

         if (tn.toLowerCase()=="button") {
            var desc = reformat(getInnerText(c));
            if (desc!="") {
               var cn = c.className;
               if (cn=='buttonTdButton' || cn=='pzhc') {
                  c = findEnclosingTableElement(c);
               }
               wizardButtonElemList.push(c);
               wizardButtonDescList.push(desc);
            }
         }
         else if (c.hasChildNodes()) {
            findButtonsInChildren(c);
         }
      }
   }
}

/* Enables/disables an individual HTML element 
   and its associated onclick event. */
function disenableElement(elem, bDisable) {
   if (elem.nodeType!=1)
      return;
      
   if (bDisable==true && elem.disabled != true) {
      /* disable */
      if (elem.onclick!=null || elem.getAttribute("data-click")!=null ) {
         elem.old_onclick = elem.onclick;
         elem.old_disabled = elem.disabled;
         elem.disabled = bDisable;
      }
   }
   else if(bDisable == false && elem.disabled != false){
      /* enable */
      if (elem.old_onclick!=null ||elem.getAttribute("data-click")!=null) {
         elem.onclick = elem.old_onclick;
         elem.disabled = elem.old_disabled;
      }
   }
}


/* Enables/disables and element and its children. */
function disenableContainedElements(elem, bDisable) {
   disenableElement(elem, bDisable);
   if(elem.hasChildNodes()) {
      var children = elem.childNodes;
      for (var i=0; i<children.length; i++) {
         var c = children[i];
         disenableContainedElements(c, bDisable);
      }
   }
}

/* Enables/disables a button */
function disenable(elem, bDisable) {
   /* this will be a table or button element */
   var tn = (elem.tagName).toLowerCase();
   if (tn=="table") {
      disenableContainedElements(elem, bDisable);
   }
   else if (tn="button") {
      disenableElement(elem, bDisable);
   }
   /* ignore other elements... */
}

/* Setup the initial display so that wizard buttons are disabled until 
   the progress bar indicates that the import operation is done (100% 
   or by fatal error).*/
function initProgressBarListener() {
   /* listen for progress updates... */
   funcProgressListenerCallbacks.push(enableImportWizardButtons);

   findButtonsInChildren(document.documentElement);
   
   for (var i=0; i<wizardButtonElemList.length; i++) {
      disenable(wizardButtonElemList[i], true);
   }
}

funcPreProgressCallbacks.push(initProgressBarListener);

</script>  </div> </div> <div style="height: 40px;">&nbsp;</div>     

<div>
<table style="height: 100%; margin-top: 10px;" cellspacing="0" cellpadding="0">
<tbody><tr>
	<td style="vertical-align: top;">
		<table cellspacing="0" cellpadding="0">
		<tbody><tr>
                       <td>                 <input id="HarnessMode" type="hidden" value="ACTION">   <input name="ActionMode" type="hidden" value=""> <input name="NewAction" type="hidden" value="false">          <input name="TaskIndex" type="hidden" value="1"> <input name="TaskHTML" type="hidden" value=""> <input name="TaskSectionReference" type="hidden" value="pxAccessGroupSelection"> <input name="TaskStreamType" type="hidden" value="Rule-Obj-FlowAction"> <input name="TaskStatus" type="hidden" value="pxAccessGroupSelection"> <input name="TaskInstructions" type="hidden" value=""> <input name="TaskHelpPresent" type="hidden" value="false"> <input name="TaskHelpType" type="hidden" value=""> <input name="TaskInstructionsCaption" type="hidden" value="Instructions"> <table width="100%" cellspacing="0" cellpadding="0"><tbody><tr><td> <div class="alignLeft" id="pyFlowActionHTML" base_ref="" name="BASE_REF"> <!-- When the Stream type is blank show Rule-Obj-HTML -->    <!-- include the flowaction HTML-->   <!-- If the flow action is a case/stage-wide action, keep the context as the work page and show the stream -->  <!-- When there is no interest page, just show the stream -->        <span data-ui-meta="{'type':'FlowAction','ruleName':'pxAccessGroupSelection','insKey':'RULE-OBJ-FLOWACTION PEGAACCEL-MANAGEMENT-IMPORT PXACCESSGROUPSELECTION #20130919T014712.528 GMT'}"><div class="sectionDivStyle" id="RULE_KEY" version="1" node_name="pxAccessGroupSelection" data-ui-meta="{'type':'Section','ruleName':'pxAccessGroupSelection','insKey':'RULE-HTML-SECTION PEGAACCEL-MANAGEMENT-IMPORT PXACCESSGROUPSELECTION #20130919T014647.327 GMT'}" uniqueid="SID1399794126192" expandrl="" base_ref="" name="BASE_REF" pyclassname="PegaAccel-Management-Import" objclass="Rule-HTML-Section" node_type="MAIN_RULE"></div><span id="pzFlowActionUITypeRef" style="display: none;" uiref="pxAccessGroupSelection" uitype="Rule-HTML-Section"></span> </span>  <!-- When there is an interest page with a dot, show HTML for that embedded page -->  <!-- When there is an interest page with no dot, show HTML for that page -->       </div> </td></tr></tbody></table>      </td>
		</tr>
		</tbody></table>
	</td>
</tr>
</tbody></table>
</div>

<script>
 	//window.attachEvent("onload",resizeWizardLeftPanel);
          pega.util.Event.addListener(window, "load", resizeWizardLeftPanel);
 	//window.attachEvent("onresize",resizeWizardLeftPanel);
          pega.util.Event.addListener(window, "load", resizeWizardLeftPanel);
 	function resizeWizardLeftPanel(){
 		var dh = document.body.offsetHeight;
 		try {
 		  document.getElementById("wizardLeftPanel").style.height= dh - 128;
 		} catch(e) {
 		  //alert(e.message);
 		}
 	}
</script><div class="sectionDivStyle" id="RULE_KEY" version="1" node_name="ConfirmCompletionNotes" data-ui-meta="{'type':'Section','ruleName':'ConfirmCompletionNotes','insKey':'RULE-HTML-SECTION PEGAACCEL-MANAGEMENT-IMPORT CONFIRMCOMPLETIONNOTES #20130919T014647.258 GMT'}" uniqueid="SID1399794126193" expandrl="" base_ref="" name="BASE_REF" pyclassname="PegaAccel-Management-Import" objclass="Rule-HTML-Section" node_type="MAIN_RULE" readonly="true"></div><div class="sectionDivStyle" id="RULE_KEY" version="1" node_name="ConfirmCarImport" data-ui-meta="{'type':'Section','ruleName':'ConfirmCarImport','insKey':'RULE-HTML-SECTION PEGAACCEL-MANAGEMENT-IMPORT CONFIRMCARIMPORT #20130919T014647.181 GMT'}" uniqueid="SID1399794126194" expandrl="" base_ref="" name="BASE_REF" pyclassname="PegaAccel-Management-Import" objclass="Rule-HTML-Section" node_type="MAIN_RULE" readonly="true"></div> </div>  </td> </tr> </tbody></table>  </div>     </div> <style id="fixedBBStyles">div#PEGA_HARNESS{height:100%;padding-bottom:57px}div#PEGA_HARNESS form {height:100%;}div#HARNESS_BUTTONS{position:absolute;bottom:0}DIV.harnessContent{overflow:auto;height:100%;width:100%}BODY.harnessBody{overflow:hidden}</style> <div class="buttonTableBoxStyle" id="HARNESS_BUTTONS" style="height: 57px;"> <table width="100%" id="HarnessFooter" cellspacing="0" cellpadding="0"> <tbody><tr>  <td width="33%" class="harness-left-footer" style="float: left;">  <table align="left" cellspacing="0" cellpadding="0"> <tbody><tr><td style="width: 100px; height: 20px; padding-right: 3px; padding-left: 0px;"></td> </tr> </tbody></table> </td>  <td width="34%" align="center">  <table align="middle" style="margin: 0px auto;" cellspacing="0" cellpadding="0"> <tbody><tr><td style="width: 59px; height: 30px; padding-right: 3px; padding-left: 0px;"><nobr><span><button class="pzhc" type="button" data-ctl="" data-click='[["setUserStart",["CANCEL"]],["doClose",[":event", null, null, false]]]'><div class="pzbtn-rnd"><div class="pzbtn-lft" data-click=".."><div class="pzbtn-rgt" data-click="..."><div class="pzbtn-mid" data-click="...."><img class="pzbtn-i" alt="" src="webwb/zblankimage.gif">Done<img class="pzbtn-i" alt="" src="webwb/zblankimage.gif"></div></div></div></div></button></span></nobr></td> </tr> </tbody></table> </td>  <td width="33%" class="harness-right-footer" style="float: right;">  <table align="right" cellspacing="0" cellpadding="0"> <tbody><tr><td style="width: 100px; height: 20px; padding-right: 3px; padding-left: 0px;"></td> </tr> </tbody></table> </td> </tr> </tbody></table> </div> <div style="display: none;"><input type="text"></div> </form> </div> <script type="javascript"> pega.u.d.documentTitle = 'Import Wizard'; pega.u.d.documentTooltip = ''; </script>    <script src="documentinfo_11905460907!!.js" type="text/javascript"></script>  <div id="PegaOnlyOnce" style="display: none;"> <script>    var oWin = null; if(typeof(showNewAlerts)=="function") showNewAlerts(0);    try { var oNewOOnames = null; oNewOOnames = {'CompositeAPIInclude':'CompositeAPIInclude','DesktopWrapperBundleInclude':'DesktopWrapperBundleInclude','DesktopWrapperInclude':'DesktopWrapperInclude','DynamicSelect_Script':'DynamicSelect_Script','EvalDOMScripts_Include':'EvalDOMScripts_Include','ListViewIncludes':'ListViewIncludes','NewActionSection':'NewActionSection','SmartPrompt':'SmartPrompt','TextArea_Includes':'TextArea_Includes','documentInfo_bundle':'documentInfo_bundle','pyWorkFormStandard':'pyWorkFormStandard','xmlDocumentInclude':'xmlDocumentInclude'}; if (!pega.ui.onlyOnce) { pega.ui.onlyOnce = new pega.ui.OnlyOnceSingleton(); } if(oNewOOnames != null) { pega.ui.onlyOnce._mergeNewNames(oNewOOnames); } } catch(e) {} </script>  </div>                <div class="primaryHighlightTop" id="primaryHighlight0" style="display: none;" isInspectorElement="true"></div><div class="primaryHighlightBottom" id="primaryHighlight1" style="display: none;" isInspectorElement="true"></div><div class="primaryHighlightLeft" id="primaryHighlight2" style="display: none;" isInspectorElement="true"></div><div class="primaryHighlightRight" id="primaryHighlight3" style="display: none;" isInspectorElement="true"></div><div class="secondaryHighlightTop" id="secondaryHighlight0" style="display: none;" isInspectorElement="true"></div><div class="secondaryHighlightBottom" id="secondaryHighlight1" style="display: none;" isInspectorElement="true"></div><div class="secondaryHighlightLeft" id="secondaryHighlight2" style="display: none;" isInspectorElement="true"></div><div class="secondaryHighlightRight" id="secondaryHighlight3" style="display: none;" isInspectorElement="true"></div><div class="inspectorIdPanel" style="display: none; visibility: hidden;" isInspectorElement="true"></div></body></html>